package com.example.demo.ui.map;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.FragmentActivity;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.example.demo.R;
import com.example.demo.Utilities;
import com.example.demo.ui.challengeProfiles.CreateChallenge;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;

import java.io.IOException;
import java.util.List;
import java.util.Locale;


/**
 * Map activity, used to select where a challenge will be visible
 * If the level is LOCAL, the map will allow you to choose a county
 * If the level is COUNTRY, the map will allow you to pick a country
 */
public class MapActivity extends FragmentActivity implements OnMapReadyCallback, GoogleMap.OnCameraIdleListener {

    private GoogleMap mMap;
    private TextView challengeLevel;
    private TextView challengeLocation;

    private LocationManager locationManager;

    private LinearLayout main;

    private Geocoder geocoder;

    Utilities.ChallengeLevel level;
    private boolean startCreate;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_map);

        // initialises the location service, used to get the current location of the user
        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

        // initialises the components used in the activity
        InitialiseViews();
        // gets the required level from the intent passed to this activity
        ResolveIntent();

        // source: activity generated by androidstudio
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    /**
     * Initialises the views used by the activity and the geocoder used to get the name of the selected location
     */
    private void InitialiseViews() {
        geocoder = new Geocoder(this, Locale.getDefault());
        main = findViewById(R.id.new_location_main);
        challengeLevel = findViewById(R.id.current_map_level);
        challengeLocation = findViewById(R.id.map_location_name);

    }

    /**
     * Resolves the intent passed to this activity.
     * in this case, the intent gives the level of the challenge location
     *
     * If the intent is empty, the map is used as a shortcut for the challenge creation
     */
    private void ResolveIntent() {
        if (getIntent().hasExtra("level")) {
            level = Utilities.ChallengeLevel.parseChallengeLevel(getIntent().getStringExtra("level"));
            challengeLevel.setText(level.toString());
            startCreate = false;
        } else {
            startCreate = true;
        }

    }

    /**
     * Called when the map is loaded
     * The map is assigned and is set to focus on the current location of the user
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        mMap.setOnCameraIdleListener(this);
        setCurrentLocation();
    }

    /**
     * Checks for location permission by the user, if the user has given permission, the map is centered to their location
     */
    private void setCurrentLocation() {
        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            //if the user hasn't given location permissions to the app, a request for permission is sent to the user
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
        } else {
            //if the app has permission, the map centers on the current location of the user
            // criteria object that sets the criteria for the location update
            Criteria criteria = new Criteria();
            criteria.setAccuracy(Criteria.ACCURACY_COARSE);
            criteria.setHorizontalAccuracy(Criteria.ACCURACY_HIGH);
            criteria.setVerticalAccuracy(Criteria.ACCURACY_HIGH);
            //if a location is found, the map gets moved to the user's location
            locationManager.requestSingleUpdate(criteria, new LocationListener() {
                @Override
                public void onLocationChanged(Location location) {
                    if (location != null) {
                        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 11));
                    }
                }

                @Override
                public void onStatusChanged(String provider, int status, Bundle extras) {

                }

                @Override
                public void onProviderEnabled(String provider) {

                }

                @Override
                public void onProviderDisabled(String provider) {

                }
            }, null);


        }
    }

    /**
     * Resolves permission requests
     * If the permission is granted, the location is requested again
     * If the permission is denied, the map is centered on coordinate 0, 0
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case 1:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    setCurrentLocation();
                }
                else
                    Toast.makeText(this, "No location permission given, Showing coordinate 0, 0", Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * If the map movement finishes, the map gets the coordinates in the centre of the map.
     * Using the challenge level the preview text is either set to the county or country
     */
    @Override
    public void onCameraIdle() {
        if (!startCreate) {
            try {
                List<Address> addressList = geocoder.getFromLocation(mMap.getCameraPosition().target.latitude, mMap.getCameraPosition().target.longitude, 1);

                if (addressList.size() > 0) {
                    if (level == Utilities.ChallengeLevel.LOCAL) {
                        challengeLocation.setText(addressList.get(0).getAdminArea());
                    } else if (level == Utilities.ChallengeLevel.COUNTRY) {
                        challengeLocation.setText(addressList.get(0).getCountryName());
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                List<Address> addressList = geocoder.getFromLocation(mMap.getCameraPosition().target.latitude, mMap.getCameraPosition().target.longitude, 1);
                if (mMap.getCameraPosition().zoom <= 8) {
                    level = Utilities.ChallengeLevel.COUNTRY;
                    challengeLevel.setText(level.toString());
                } else {
                    level = Utilities.ChallengeLevel.LOCAL;
                    challengeLevel.setText(level.toString());
                }
                if (addressList.size() > 0) {
                    if (mMap.getCameraPosition().zoom <= 8) {
                        challengeLocation.setText(addressList.get(0).getCountryName());
                    } else {
                        challengeLocation.setText(addressList.get(0).getAdminArea());
                    }
                } else {
                    challengeLocation.setText("");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }

    /**
     * If the activity is started from the CreateChallenge activity
     * If the user presses the select location button, the coordinates in the center of the map are selected
     * The longitude and latitude are then added to an intent and the activity finishes with an OK result
     * The intent is then passed onto the previous activity
     *
     * If the activity is not started from the CreateChallenge activity, the CreateChallenge Activity is started and the chosen coordinates are passed to it
     */
    public void chooseLocation(View view) {
        List<Address> addressList = null;
        try {
            addressList = geocoder.getFromLocation(mMap.getCameraPosition().target.latitude, mMap.getCameraPosition().target.longitude, 1);
            if (addressList.size() > 0) {
                if (addressList.get(0).getAdminArea() != null) {
                    if (!startCreate) {
                        Intent chosenCoordinates = new Intent();
                        chosenCoordinates.putExtra("lat", mMap.getCameraPosition().target.latitude);
                        chosenCoordinates.putExtra("long", mMap.getCameraPosition().target.longitude);
                        setResult(RESULT_OK, chosenCoordinates);
                        finish();
                    } else {
                        Intent chosenCoordinates = new Intent(this, CreateChallenge.class);
                        chosenCoordinates.putExtra("level", level);
                        chosenCoordinates.putExtra("lat", mMap.getCameraPosition().target.latitude);
                        chosenCoordinates.putExtra("long", mMap.getCameraPosition().target.longitude);
                        startActivityForResult(chosenCoordinates, 1);
                    }
                }else {
                    Toast.makeText(this, "Please choose a valid location (Location with a valid local area or county name)", Toast.LENGTH_SHORT).show();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * If a result is received from the CreateChallenge activity, the result gets sent back to the main activity so the challenge list can be updated
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 1) {
            if (resultCode == RESULT_OK){
                setResult(RESULT_OK, data);
                finish();
            }
        }
    }
}

